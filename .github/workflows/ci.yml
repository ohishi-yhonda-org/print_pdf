name: CI

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release (true/false)'
        required: false
        default: 'false'
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0'

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  test:
    runs-on: [self-hosted, Windows, X64, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v ./...
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0

    - name: Run tests with coverage
      continue-on-error: true
      run: go test -coverprofile=coverage.out .
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0

    - name: Display coverage
      run: |
        if (Test-Path coverage.out) {
          go tool cover -func=coverage.out
        } else {
          Write-Host "Coverage file not generated, skipping coverage display"
        }
    
    - name: Upload coverage to Codecov
      if: hashFiles('coverage.out') != ''
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application (optimized for security)
      run: go build -ldflags "-s -w" -trimpath -v ./...
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0

  lint:
    runs-on: [self-hosted, Windows, X64, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Install golangci-lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint --version
    
    - name: Run golangci-lint
      continue-on-error: true
      run: golangci-lint run ./...

  auto_tag:
    runs-on: [self-hosted, Windows, X64, test]
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup GitHub CLI
      shell: powershell
      run: |
        Write-Host "Checking GitHub CLI availability..."
        
        # GitHub CLIが既にインストールされているかチェック
        try {
          $ghVersion = gh --version
          Write-Host "GitHub CLI already available: $ghVersion"
        } catch {
          Write-Host "GitHub CLI not found, installing via direct download..."
          
          try {
            # 直接ダウンロードしてインストール
            $ghUrl = "https://github.com/cli/cli/releases/latest/download/gh_2.40.1_windows_amd64.msi"
            $ghMsi = "$env:TEMP\gh.msi"
            Invoke-WebRequest -Uri $ghUrl -OutFile $ghMsi
            Start-Process msiexec.exe -ArgumentList "/i", $ghMsi, "/quiet", "/norestart" -Wait
            Remove-Item $ghMsi -Force
            
            # PATHを更新
            $env:PATH = "$env:PATH;C:\Program Files\GitHub CLI"
            Write-Host "GitHub CLI installed via direct download"
            
            # インストール後の確認
            $ghVersion = gh --version
            Write-Host "GitHub CLI installation verified: $ghVersion"
            
          } catch {
            Write-Host "Failed to install GitHub CLI: $_"
            Write-Host "Falling back to API-only approach"
            # フォールバック処理は後続のステップで実装
          }
        }
    
    - name: Verify GitHub CLI installation
      id: verify
      shell: powershell
      run: |
        Write-Host "Setting up GitHub CLI environment..."
        $env:GH_TOKEN = "${{ secrets.GITHUB_TOKEN }}"
        
        # GitHub CLI確認（フォールバック可能）
        try {
          $ghVersion = gh --version
          Write-Host "GitHub CLI version: $ghVersion"
          echo "github_cli_available=true" >> $env:GITHUB_OUTPUT
        } catch {
          Write-Host "Warning: GitHub CLI not available, will use API fallback"
          echo "github_cli_available=false" >> $env:GITHUB_OUTPUT
        }
    
    - name: Generate next version using GitHub CLI or API
      id: version
      shell: powershell
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        Write-Host "Fetching latest releases..."
        $latestTag = $null
        
        # GitHub CLIが利用可能な場合は優先使用
        if ("${{ steps.verify.outputs.github_cli_available }}" -eq "true") {
          try {
            Write-Host "Using GitHub CLI to fetch releases..."
            $releases = gh release list --limit 10 --json tagName | ConvertFrom-Json
            $latestTag = $releases | Where-Object { $_.tagName -match "^v\d+\.\d+\.\d+$" } | Select-Object -First 1 | Select-Object -ExpandProperty tagName
            
            if ($latestTag) {
              Write-Host "Latest release tag found via GitHub CLI: $latestTag"
            } else {
              Write-Host "No valid release tags found via GitHub CLI"
            }
          } catch {
            Write-Host "GitHub CLI failed: $_"
            $latestTag = $null
          }
        }
        
        # GitHub CLIが失敗した場合はAPI使用
        if (-not $latestTag) {
          try {
            Write-Host "Using GitHub API to fetch releases..."
            $headers = @{
              'Authorization' = "token $env:GITHUB_TOKEN"
              'Accept' = 'application/vnd.github.v3+json'
            }
            $apiUrl = "https://api.github.com/repos/${{ github.repository }}/releases?per_page=10"
            $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers
            $latestTag = $response | Where-Object { $_.tag_name -match "^v\d+\.\d+\.\d+$" } | Select-Object -First 1 | Select-Object -ExpandProperty tag_name
            
            if ($latestTag) {
              Write-Host "Latest release tag found via API: $latestTag"
            } else {
              Write-Host "No valid release tags found via API"
            }
          } catch {
            Write-Host "GitHub API also failed: $_"
            $latestTag = $null
          }
        }
        
        # バージョン生成
        if ($latestTag -and $latestTag -match "v(\d+)\.(\d+)\.(\d+)") {
          $major = [int]$matches[1]
          $minor = [int]$matches[2]
          $patch = [int]$matches[3] + 1
          $newVersion = "v$major.$minor.$patch"
        } else {
          $newVersion = "v1.0.0"
        }
        
        Write-Host "Generated version: $newVersion"
        echo "version=$newVersion" >> $env:GITHUB_OUTPUT
    
    - name: Create release with GitHub CLI or API
      shell: powershell
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $version = "${{ steps.version.outputs.version }}"
        Write-Host "Creating release: $version"
        
        # リリース説明文を準備
        $releaseNotes = "自動生成されたリリース $version`n`n"
        $releaseNotes += "## 🤖 CI自動リリース`n"
        $releaseNotes += "- テスト/Lint通過後の自動リリース`n"
        $releaseNotes += "- [release]フラグ付きコミットでトリガー`n`n"
        $releaseNotes += "## 機能`n"
        $releaseNotes += "- HTTP API サーバー機能 (ポート8081)`n"
        $releaseNotes += "- PDF生成機能（日本語フォント対応）`n"
        $releaseNotes += "- Windowsサービス対応"

        # GitHub CLIが利用可能な場合は優先使用
        if ("${{ steps.verify.outputs.github_cli_available }}" -eq "true") {
          try {
            Write-Host "Using GitHub CLI to create release..."
            gh release create $version --title "PDF Generator $version" --notes $releaseNotes --latest
            Write-Host "Release $version created successfully via GitHub CLI"
            exit 0
          } catch {
            Write-Host "GitHub CLI failed: $_"
          }
        }
        
        # GitHub CLIが失敗した場合はAPI使用
        Write-Host "Using GitHub API to create release..."
        try {
          $headers = @{
            'Authorization' = "token $env:GITHUB_TOKEN"
            'Accept' = 'application/vnd.github.v3+json'
            'Content-Type' = 'application/json'
          }
          
          $body = @{
            tag_name = $version
            target_commitish = "main"
            name = "PDF Generator $version"
            body = $releaseNotes
            draft = $false
            prerelease = $false
          } | ConvertTo-Json
          
          $apiUrl = "https://api.github.com/repos/${{ github.repository }}/releases"
          $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $body
          Write-Host "Release $version created successfully via GitHub API"
        } catch {
          Write-Host "Failed to create release via both CLI and API: $_"
          exit 1
        }

  release:
    runs-on: [self-hosted, Windows, X64, test]
    # Skip test/lint dependencies for tag-based releases (assume they passed on main)
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Quick validation tests for release
      run: |
        Write-Host 'Pre-release lightweight testing in progress...'
        Write-Host 'Only build verification since tests already passed in test job...'
        go build -ldflags "-s -w" -trimpath -v ./...
        Write-Host 'Release quality verification complete. Continuing with release...'
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0
    
    - name: Set version
      id: set_version
      shell: powershell
      run: |
        if ("${{ github.event.inputs.version }}" -ne "" -and "${{ github.event.inputs.create_release }}" -eq "true") {
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Manual version: $version"
        } elseif ("${{ github.ref_type }}" -eq "tag" -and "${{ github.ref_name }}" -match "^v\d+\.\d+\.\d+") {
          $version = "${{ github.ref_name }}"
          Write-Host "Tag version: $version"
        } else {
          Write-Host "Not a valid release tag or manual trigger"
          $version = "dev"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "VERSION=$version" >> $env:GITHUB_ENV
        echo "Building version: $version"
    
    - name: Build release executable (Anti-Virus Optimized)
      shell: powershell
      run: |
        Write-Host 'Starting anti-virus optimized build to reduce false positives...'
        $env:GOOS = "windows"
        $env:GOARCH = "amd64"
        $env:CGO_ENABLED = "0"
        go build -ldflags "-s -w -X main.Version=${{ steps.set_version.outputs.version }}" -trimpath -buildmode=exe -o print_pdf.exe .
        Write-Host 'Optimized build completed'
        
        # ファイルサイズとハッシュを表示
        $fileInfo = Get-Item print_pdf.exe
        Write-Host "File size: $($fileInfo.Length) bytes"
        $hash = Get-FileHash print_pdf.exe -Algorithm SHA256
        Write-Host "SHA256: $($hash.Hash)"
    
    - name: Create zip archive
      shell: powershell
      run: |
        Compress-Archive -Path print_pdf.exe, service_manager.bat -DestinationPath print_pdf_${{ steps.set_version.outputs.version }}.zip
        
        # ZIPファイルの情報も表示
        $zipInfo = Get-Item print_pdf_${{ steps.set_version.outputs.version }}.zip
        Write-Host "ZIP file size: $($zipInfo.Length) bytes"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: (github.event.inputs.create_release == 'true') || (startsWith(github.ref, 'refs/tags/v') && !contains(steps.set_version.outputs.version, '-dev.'))
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.set_version.outputs.version }}
        name: PDF Generator ${{ steps.set_version.outputs.version }}
        body: |
          自動ビルドされたPDF Generator ${{ steps.set_version.outputs.version }}
          
          ## 🛡️ セキュリティ最適化
          - ウイルス対策ソフト誤検知を減らす最適化ビルド
          - デバッグシンボル削除 (-s -w)
          - ビルドパス情報削除 (-trimpath)
          - CGO無効化でクリーンビルド
          
          ## 機能
          - HTTP API サーバー機能 (ポート8081)
          - PDF生成機能（日本語フォント対応）
          - 包括的なイベントログ機能
          - 自動アップデート機能
          - Windowsサービス対応
          
          ## インストール方法
          1. print_pdf_${{ steps.set_version.outputs.version }}.zip をダウンロード
          2. 解凍して適切なフォルダに配置
          3. Windows Defenderで除外設定 (必要に応じて)
          4. service_manager.bat でWindowsサービスとして登録
          
          ## ウイルス対策ソフト対応
          このバイナリはGoで作成されており、一部のウイルス対策ソフトで誤検知される場合があります。
          その場合は以下を実行してください：
          - Windows Defender: 設定 → ウイルスと脅威の防止 → 除外 → ファイルを除外
          - 信頼できないファイルとして報告された場合、VirusTotal等で検証可能
          
          ## API エンドポイント
          - POST /generate-pdf : PDF生成
          - GET /health : ヘルスチェック
        draft: false
        prerelease: false
        files: |
          print_pdf_${{ steps.set_version.outputs.version }}.zip

