name: CI

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release (true/false)'
        required: false
        default: 'false'
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0'

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  test:
    runs-on: [self-hosted, Windows, X64, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v ./...
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0

    - name: Run tests with coverage
      continue-on-error: true
      run: go test -coverprofile=coverage.out .
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0

    - name: Display coverage
      run: |
        if (Test-Path coverage.out) {
          go tool cover -func=coverage.out
        } else {
          Write-Host "Coverage file not generated, skipping coverage display"
        }
    
    - name: Upload coverage to Codecov
      if: hashFiles('coverage.out') != ''
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application (optimized for security)
      run: go build -ldflags "-s -w" -trimpath -v ./...
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0

  lint:
    runs-on: [self-hosted, Windows, X64, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Install golangci-lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint --version
    
    - name: Run golangci-lint
      continue-on-error: true
      run: golangci-lint run ./...

  release:
    runs-on: [self-hosted, Windows, X64, test]
    needs: [test, lint]
    if: (github.event.inputs.create_release == 'true') || (github.ref == 'refs/heads/main' && github.event_name == 'push')

    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Quick validation tests for release
      run: |
        Write-Host 'Pre-release lightweight testing in progress...'
        Write-Host 'Only build verification since tests already passed in test job...'
        go build -ldflags "-s -w" -trimpath -v ./...
        Write-Host 'Release quality verification complete. Continuing with release...'
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0
    
    - name: Set version
      id: set_version
      shell: powershell
      run: |
        if ("${{ github.event.inputs.version }}" -ne "" -and "${{ github.event.inputs.create_release }}" -eq "true") {
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Manual version: $version"
        } elseif ("${{ github.ref_name }}" -match "^v\d+\.\d+\.\d+") {
          $version = "${{ github.ref_name }}"
          Write-Host "Tag version: $version"
        } else {
          # mainブランチの場合、最新タグから次のバージョンを生成
          try {
            $gitOutput = & "C:\Program Files\Git\bin\git.exe" tag --sort=-version:refname 2>$null
            $latestTag = $gitOutput | Select-Object -First 1
            Write-Host "Latest tag found: $latestTag"
          } catch {
            Write-Host "Git command failed, trying alternative path"
            try {
              $gitOutput = & git tag --sort=-version:refname 2>$null
              $latestTag = $gitOutput | Select-Object -First 1
              Write-Host "Latest tag found: $latestTag"
            } catch {
              Write-Host "Git not found, using fallback"
              $latestTag = $null
            }
          }
          
          if ($latestTag -and $latestTag -match "v(\d+)\.(\d+)\.(\d+)") {
            $major = [int]$matches[1]
            $minor = [int]$matches[2]
            $patch = [int]$matches[3] + 1
            $date = Get-Date -Format "yyyyMMdd"
            $time = Get-Date -Format "HHmm"
            $version = "v$major.$minor.$patch-dev.$date.$time"
            Write-Host "Generated incremental version: $version"
          } else {
            # タグが見つからない場合のフォールバック
            $date = Get-Date -Format "yyyyMMdd"
            $time = Get-Date -Format "HHmm"
            $version = "v1.0.14-dev.$date.$time"
            Write-Host "Using fallback version: $version"
          }
          Write-Host "Development version: $version"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "VERSION=$version" >> $env:GITHUB_ENV
        echo "Building version: $version"
    
    - name: Build release executable (Anti-Virus Optimized)
      shell: powershell
      run: |
        Write-Host 'Starting anti-virus optimized build to reduce false positives...'
        $env:GOOS = "windows"
        $env:GOARCH = "amd64"
        $env:CGO_ENABLED = "0"
        go build -ldflags "-s -w -X main.Version=${{ steps.set_version.outputs.version }}" -trimpath -buildmode=exe -o print_pdf.exe .
        Write-Host 'Optimized build completed'
        
        # ファイルサイズとハッシュを表示
        $fileInfo = Get-Item print_pdf.exe
        Write-Host "File size: $($fileInfo.Length) bytes"
        $hash = Get-FileHash print_pdf.exe -Algorithm SHA256
        Write-Host "SHA256: $($hash.Hash)"
    
    - name: Create zip archive
      shell: powershell
      run: |
        Compress-Archive -Path print_pdf.exe, service_manager.bat -DestinationPath print_pdf_${{ steps.set_version.outputs.version }}.zip
        
        # ZIPファイルの情報も表示
        $zipInfo = Get-Item print_pdf_${{ steps.set_version.outputs.version }}.zip
        Write-Host "ZIP file size: $($zipInfo.Length) bytes"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: github.event.inputs.create_release == 'true' || github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.set_version.outputs.version }}
        name: PDF Generator ${{ steps.set_version.outputs.version }}
        body: |
          自動ビルドされたPDF Generator ${{ steps.set_version.outputs.version }}
          
          ## 🛡️ セキュリティ最適化
          - ウイルス対策ソフト誤検知を減らす最適化ビルド
          - デバッグシンボル削除 (-s -w)
          - ビルドパス情報削除 (-trimpath)
          - CGO無効化でクリーンビルド
          
          ## 機能
          - HTTP API サーバー機能 (ポート8081)
          - PDF生成機能（日本語フォント対応）
          - 包括的なイベントログ機能
          - 自動アップデート機能
          - Windowsサービス対応
          
          ## インストール方法
          1. print_pdf_${{ steps.set_version.outputs.version }}.zip をダウンロード
          2. 解凍して適切なフォルダに配置
          3. Windows Defenderで除外設定 (必要に応じて)
          4. service_manager.bat でWindowsサービスとして登録
          
          ## ウイルス対策ソフト対応
          このバイナリはGoで作成されており、一部のウイルス対策ソフトで誤検知される場合があります。
          その場合は以下を実行してください：
          - Windows Defender: 設定 → ウイルスと脅威の防止 → 除外 → ファイルを除外
          - 信頼できないファイルとして報告された場合、VirusTotal等で検証可能
          
          ## API エンドポイント
          - POST /generate-pdf : PDF生成
          - GET /health : ヘルスチェック
        draft: false
        prerelease: false
        files: |
          print_pdf_${{ steps.set_version.outputs.version }}.zip

