name: CI

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release (true/false)'
        required: false
        default: 'false'
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0'

jobs:
  test:
    runs-on: [self-hosted, Windows, X64, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v ./...
      env:
        GOOS: windows
        GOARCH: amd64

    - name: Run tests with coverage
      continue-on-error: true
      run: go test -coverprofile=coverage.out .
      env:
        GOOS: windows
        GOARCH: amd64

    - name: Display coverage
      run: |
        if (Test-Path coverage.out) {
          go tool cover -func=coverage.out
        } else {
          Write-Host "Coverage file not generated, skipping coverage display"
        }
    
    - name: Upload coverage to Codecov
      if: hashFiles('coverage.out') != ''
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application
      run: go build -v ./...

  lint:
    runs-on: [self-hosted, Windows, X64, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Install golangci-lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint --version
    
    - name: Run golangci-lint
      continue-on-error: true
      run: golangci-lint run ./...

  release:
    runs-on: [self-hosted, Windows, X64, test]
    needs: [test, lint]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set version
      shell: powershell
      run: |
        if ("${{ github.event.inputs.version }}" -ne "" -and "${{ github.event.inputs.create_release }}" -eq "true") {
          $version = "${{ github.event.inputs.version }}"
        } elseif ("${{ github.ref_name }}" -ne "") {
          $version = "${{ github.ref_name }}"
        } else {
          $version = "v1.0.0"
        }
        echo "VERSION=$version" >> $env:GITHUB_ENV
        echo "Building version: $version"
    
    - name: Build release executable
      shell: powershell
      run: |
        go build -ldflags "-X main.Version=$env:VERSION" -o print_pdf.exe .
    
    - name: Create zip archive
      shell: powershell
      run: |
        Compress-Archive -Path print_pdf.exe, service_manager.bat -DestinationPath print_pdf_$env:VERSION.zip
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: PDF Generator ${{ env.VERSION }}
        body: |
          自動ビルドされたPDF Generator ${{ env.VERSION }}
          
          ## 機能
          - HTTP API サーバー機能 (ポート8081)
          - PDF生成機能（日本語フォント対応）
          - 包括的なイベントログ機能
          - 自動アップデート機能
          - Windowsサービス対応
          
          ## インストール方法
          1. print_pdf_${{ env.VERSION }}.zip をダウンロード
          2. 解凍して適切なフォルダに配置
          3. service_manager.bat でWindowsサービスとして登録
          
          ## API エンドポイント
          - POST /generate-pdf : PDF生成
          - GET /health : ヘルスチェック
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./print_pdf_${{ env.VERSION }}.zip
        asset_name: print_pdf_${{ env.VERSION }}.zip
        asset_content_type: application/zip

