name: CI

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release (true/false)'
        required: false
        default: 'false'
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0'

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  test:
    runs-on: [self-hosted, Windows, X64, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v ./...
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0

    - name: Run tests with coverage
      continue-on-error: true
      run: go test -coverprofile=coverage.out .
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0

    - name: Display coverage
      run: |
        if (Test-Path coverage.out) {
          go tool cover -func=coverage.out
        } else {
          Write-Host "Coverage file not generated, skipping coverage display"
        }
    
    - name: Upload coverage to Codecov
      if: hashFiles('coverage.out') != ''
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application (optimized for security)
      run: go build -ldflags "-s -w" -trimpath -v ./...
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0

  lint:
    runs-on: [self-hosted, Windows, X64, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Install golangci-lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint --version
    
    - name: Run golangci-lint
      continue-on-error: true
      run: golangci-lint run ./...

  auto_tag:
    runs-on: [self-hosted, Windows, X64, test]
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate next version using GitHub API
      id: version
      shell: powershell
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        Write-Host 'Fetching latest releases via GitHub API...'
        $latestTag = $null
        
        # Use GitHub API
        try {
          $headers = @{
            'Authorization' = 'token ' + $env:GITHUB_TOKEN
            'Accept' = 'application/vnd.github.v3+json'
          }
          $apiUrl = 'https://api.github.com/repos/${{ github.repository }}/releases?per_page=10'
          $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers
          $latestTag = $response | Where-Object { $_.tag_name -match "^v\d+\.\d+\.\d+$" } | Select-Object -First 1 | Select-Object -ExpandProperty tag_name
          
          if ($latestTag) {
            Write-Host ('Latest release tag found: ' + $latestTag)
          } else {
            Write-Host 'No valid release tags found'
          }
        } catch {
          Write-Host 'GitHub API failed: ' + $_
          $latestTag = $null
        }
        
        # Generate version
        if ($latestTag -and $latestTag -match "v(\d+)\.(\d+)\.(\d+)") {
          $major = [int]$matches[1]
          $minor = [int]$matches[2]
          $patch = [int]$matches[3] + 1
          $newVersion = 'v' + $major + '.' + $minor + '.' + $patch
        } else {
          $newVersion = 'v1.0.0'
        }
        
        Write-Host ('Generated version: ' + $newVersion)
        echo ('version=' + $newVersion) >> $env:GITHUB_OUTPUT
    
    - name: Create release with GitHub API
      shell: powershell
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $version = '${{ steps.version.outputs.version }}'
        Write-Host ('Creating release: ' + $version)
        
        # Prepare release notes in English to avoid encoding issues
        $releaseNotes = 'Automated release ' + $version + "`n`n"
        $releaseNotes += '## 🤖 CI Automated Release' + "`n"
        $releaseNotes += '- Automated release after tests/lint pass' + "`n"
        $releaseNotes += '- Triggered by commits with [release] flag' + "`n`n"
        $releaseNotes += '## Features' + "`n"
        $releaseNotes += '- HTTP API server (port 8081)' + "`n"
        $releaseNotes += '- PDF generation with Japanese font support' + "`n"
        $releaseNotes += '- Windows service support'

        # Create release via GitHub API
        try {
          Write-Host 'Creating release via GitHub API...'
          $headers = @{
            'Authorization' = 'token ' + $env:GITHUB_TOKEN
            'Accept' = 'application/vnd.github.v3+json'
            'Content-Type' = 'application/json'
          }
          
          $body = @{
            tag_name = $version
            target_commitish = 'main'
            name = 'PDF Generator ' + $version
            body = $releaseNotes
            draft = $false
            prerelease = $false
          } | ConvertTo-Json
          
          $apiUrl = 'https://api.github.com/repos/${{ github.repository }}/releases'
          $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $body
          Write-Host ('Release ' + $version + ' created successfully')
          
          # Store release info for asset upload
          $global:releaseId = $response.id
          $global:uploadUrl = $response.upload_url
        } catch {
          Write-Host 'Failed to create release: ' + $_
          exit 1
        }
    
    - name: Build release executable
      shell: powershell
      run: |
        Write-Host 'Building optimized executable...'
        $env:GOOS = 'windows'
        $env:GOARCH = 'amd64'
        $env:CGO_ENABLED = '0'
        go build -ldflags '-s -w -X main.Version=${{ steps.version.outputs.version }}' -trimpath -buildmode=exe -o print_pdf.exe .
        Write-Host 'Build completed'
        
        # Display file info
        $fileInfo = Get-Item print_pdf.exe
        Write-Host ('File size: ' + $fileInfo.Length + ' bytes')
        $hash = Get-FileHash print_pdf.exe -Algorithm SHA256
        Write-Host ('SHA256: ' + $hash.Hash)
    
    - name: Create ZIP archive
      shell: powershell
      run: |
        $version = '${{ steps.version.outputs.version }}'
        $zipName = 'print_pdf_' + $version + '.zip'
        
        # Create ZIP archive
        Compress-Archive -Path print_pdf.exe, service_manager.bat -DestinationPath $zipName
        Write-Host ('ZIP archive created: ' + $zipName)
        
        # Display ZIP info
        $zipInfo = Get-Item $zipName
        Write-Host ('ZIP file size: ' + $zipInfo.Length + ' bytes')
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        files: |
          print_pdf_${{ steps.version.outputs.version }}.zip

  release:
    runs-on: [self-hosted, Windows, X64, test]
    # Skip test/lint dependencies for tag-based releases (assume they passed on main)
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Go installation
      run: go version
    
    - name: Quick validation tests for release
      run: |
        Write-Host 'Pre-release lightweight testing in progress...'
        Write-Host 'Only build verification since tests already passed in test job...'
        go build -ldflags "-s -w" -trimpath -v ./...
        Write-Host 'Release quality verification complete. Continuing with release...'
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0
    
    - name: Set version
      id: set_version
      shell: powershell
      run: |
        if ('${{ github.event.inputs.version }}' -ne '' -and '${{ github.event.inputs.create_release }}' -eq 'true') {
          $version = '${{ github.event.inputs.version }}'
          Write-Host ('Manual version: ' + $version)
        } elseif ('${{ github.ref_type }}' -eq 'tag' -and '${{ github.ref_name }}' -match '^v\d+\.\d+\.\d+') {
          $version = '${{ github.ref_name }}'
          Write-Host ('Tag version: ' + $version)
        } else {
          Write-Host 'Not a valid release tag or manual trigger'
          $version = 'dev'
        }
        echo ('version=' + $version) >> $env:GITHUB_OUTPUT
        echo ('VERSION=' + $version) >> $env:GITHUB_ENV
        echo ('Building version: ' + $version)
    
    - name: Build release executable (Anti-Virus Optimized)
      shell: powershell
      run: |
        Write-Host 'Starting anti-virus optimized build to reduce false positives...'
        $env:GOOS = 'windows'
        $env:GOARCH = 'amd64'
        $env:CGO_ENABLED = '0'
        go build -ldflags '-s -w -X main.Version=${{ steps.set_version.outputs.version }}' -trimpath -buildmode=exe -o print_pdf.exe .
        Write-Host 'Optimized build completed'
        
        # Display file size and hash
        $fileInfo = Get-Item print_pdf.exe
        Write-Host ('File size: ' + $fileInfo.Length + ' bytes')
        $hash = Get-FileHash print_pdf.exe -Algorithm SHA256
        Write-Host ('SHA256: ' + $hash.Hash)
    
    - name: Create zip archive
      shell: powershell
      run: |
        $zipName = 'print_pdf_${{ steps.set_version.outputs.version }}.zip'
        Compress-Archive -Path print_pdf.exe, service_manager.bat -DestinationPath $zipName
        
        # Display ZIP file information
        $zipInfo = Get-Item $zipName
        Write-Host ('ZIP file size: ' + $zipInfo.Length + ' bytes')
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: (github.event.inputs.create_release == 'true') || (startsWith(github.ref, 'refs/tags/v') && !contains(steps.set_version.outputs.version, '-dev.'))
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.set_version.outputs.version }}
        name: PDF Generator ${{ steps.set_version.outputs.version }}
        body: |
          自動ビルドされたPDF Generator ${{ steps.set_version.outputs.version }}
          
          ## 🛡️ セキュリティ最適化
          - ウイルス対策ソフト誤検知を減らす最適化ビルド
          - デバッグシンボル削除 (-s -w)
          - ビルドパス情報削除 (-trimpath)
          - CGO無効化でクリーンビルド
          
          ## 機能
          - HTTP API サーバー機能 (ポート8081)
          - PDF生成機能（日本語フォント対応）
          - 包括的なイベントログ機能
          - 自動アップデート機能
          - Windowsサービス対応
          
          ## インストール方法
          1. print_pdf_${{ steps.set_version.outputs.version }}.zip をダウンロード
          2. 解凍して適切なフォルダに配置
          3. Windows Defenderで除外設定 (必要に応じて)
          4. service_manager.bat でWindowsサービスとして登録
          
          ## ウイルス対策ソフト対応
          このバイナリはGoで作成されており、一部のウイルス対策ソフトで誤検知される場合があります。
          その場合は以下を実行してください：
          - Windows Defender: 設定 → ウイルスと脅威の防止 → 除外 → ファイルを除外
          - 信頼できないファイルとして報告された場合、VirusTotal等で検証可能
          
          ## API エンドポイント
          - POST /generate-pdf : PDF生成
          - GET /health : ヘルスチェック
        draft: false
        prerelease: false
        files: |
          print_pdf_${{ steps.set_version.outputs.version }}.zip
    
    - name: Restart service if running
      if: success()
      shell: powershell
      continue-on-error: true
      run: |
        Write-Host 'Checking if PDF Generator API Service is running...'
        $serviceName = 'PDF Generator API Service'
        
        try {
          $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
          
          if ($service) {
            Write-Host ('Service found. Current status: ' + $service.Status)
            
            if ($service.Status -eq 'Running') {
              Write-Host 'Service is running. Attempting to restart...'
              
              # Stop the service
              Stop-Service -Name $serviceName -Force
              Write-Host 'Service stopped'
              
              # Wait a moment for service to fully stop
              Start-Sleep -Seconds 5
              
              # Start the service
              Start-Service -Name $serviceName
              Write-Host 'Service restarted successfully'
              
              # Verify service is running
              Start-Sleep -Seconds 3
              $service = Get-Service -Name $serviceName
              Write-Host ('Service status after restart: ' + $service.Status)
            } else {
              Write-Host 'Service is not running. No restart needed.'
            }
          } else {
            Write-Host 'Service is not installed on this machine.'
          }
        } catch {
          Write-Host ('Error during service restart: ' + $_)
          Write-Host 'This is not critical. The release was successful.'
        }

