name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    runs-on: [self-hosted, Windows, X64, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Verify Go installation
      run: go version
    
    - name: Run tests before release
      run: |
        go test -v ./...
        go test -v -race -coverprofile=coverage.out ./...
    
    - name: Run linter before release
      continue-on-error: true
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run ./...
    
    - name: Set version from input or tag
      shell: powershell
      run: |
        if ("${{ github.event.inputs.version }}" -ne "") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}"
        }
        echo "VERSION=$version" >> $env:GITHUB_ENV
        echo "Building version: $version"
    
    - name: Build executable
      shell: powershell
      run: |
        go build -ldflags "-X main.Version=$env:VERSION" -o print_pdf.exe .
    
    - name: Create zip archive
      shell: powershell
      run: |
        Compress-Archive -Path print_pdf.exe, service_manager.bat -DestinationPath print_pdf_$env:VERSION.zip
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: PDF Generator ${{ env.VERSION }}
        body: |
          自動ビルドされたPDF Generator ${{ env.VERSION }}
          
          ## 変更内容
          - HTTP API サーバー機能
          - PDF生成機能（日本語フォント対応）
          - イベントログ機能
          - 自動アップデート機能
          
          ## インストール方法
          1. print_pdf_${{ env.VERSION }}.zip をダウンロード
          2. 解凍して適切なフォルダに配置
          3. service_manager.bat でWindowsサービスとして登録
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./print_pdf_${{ env.VERSION }}.zip
        asset_name: print_pdf_${{ env.VERSION }}.zip
        asset_content_type: application/zip
